#!/usr/bin/env python3
import asyncio
from aiostream import stream
from pathlib import Path
from parse import parse_line
from predict import load_models
from predict import predict
from logger import create_logger
from logger import create_listener


async def read_conf(fconf):
    conf = {}
    f = open(fconf, "r")
    for line in f:
        v = str.split(line.strip(), ",")
        if len(v) == 2:
            conf[v[0]] == v[1]
        else:
            continue
    f.close()
    return conf


async def read_enabled():
    enabled = []
    p = Path("/etc/bbg/enabled/")
    for fconf in p.glob("*/**.conf"):
        conf = read_conf(fconf)
        for key in conf.keys():
            if conf[key] == "enabled":
                enabled.append(key)
            else:
                continue
    return enabled


async def global_listener(enabled):
    async def create_listener_(site):
        return create_listener(site)
    listeners = []
    for site in enabled:
        listeners.append(create_listener_(site))
    combo = stream.merge(listeners)
    async with combo.stream() as streamer:
        async for stream in streamer:
            print(stream)


async def main():
    listener = global_listener(["/var/log/nginx/gmrandazzo.access.log", "/var/log/nginx/gmrnxtcl.access.log"])
    #for msg in listener:
    #   print(msg)
    """
    # Create the final output log
    log = create_logger(app_name="BBG",
                        log_level=logging.INFO)

    res = parse_line(sys.argv[1])
    #print("%s|%s|%s" % (res["ip"], res["request-string"], res["http_type"]))
    
    models, header = load_models(sys.argv[2])
    res = predict(d[], models, header)
    #print("%.4f %.4f" % (res["prediction"], res["stdev"]))

    # emit to the logger
    # "BBG SUSPICIOUS ${IP} ${URL}"
    """

if __name__ in "__main__":
    asyncio.run(main())


